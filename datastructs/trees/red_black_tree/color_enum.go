// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.7
// Revision: bf63e108589bbd2327b13ec2c5da532aad234029
// Build Date: 2023-07-25T23:27:55Z
// Built By: goreleaser

package red_black_tree

import (
	"errors"
	"fmt"
)

const (
	// ColorBlack is a color of type Black.
	ColorBlack color = iota
	// ColorRed is a color of type Red.
	ColorRed
)

var ErrInvalidcolor = errors.New("not a valid color")

const _colorName = "blackred"

var _colorMap = map[color]string{
	ColorBlack: _colorName[0:5],
	ColorRed:   _colorName[5:8],
}

// String implements the Stringer interface.
func (x color) String() string {
	if str, ok := _colorMap[x]; ok {
		return str
	}
	return fmt.Sprintf("color(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x color) IsValid() bool {
	_, ok := _colorMap[x]
	return ok
}

var _colorValue = map[string]color{
	_colorName[0:5]: ColorBlack,
	_colorName[5:8]: ColorRed,
}

// Parsecolor attempts to convert a string to a color.
func Parsecolor(name string) (color, error) {
	if x, ok := _colorValue[name]; ok {
		return x, nil
	}
	return color(0), fmt.Errorf("%s is %w", name, ErrInvalidcolor)
}
